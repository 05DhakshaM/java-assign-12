import java.util.Arrays;

class GenericArrayOperations<T> {
    private Object[] array;
    private int size;

    public GenericArrayOperations(int initialCapacity) {
        array = new Object[initialCapacity];
        size = 0;
    }

    public void addElementAtBeginning(T element) {
        ensureCapacity();
        System.arraycopy(array, 0, array, 1, size);
        array[0] = element;
        size++;
    }

    public void addElementAtMiddle(T element, int position) {
        if (position < 0 || position > size) {
            throw new IllegalArgumentException("Invalid position");
        }
        ensureCapacity();
        System.arraycopy(array, position, array, position + 1, size - position);
        array[position] = element;
        size++;
    }

    public void addElementAtEnd(T element) {
        ensureCapacity();
        array[size] = element;
        size++;
    }

    private void ensureCapacity() {
        if (size == array.length) {
            array = Arrays.copyOf(array, array.length * 2);
        }
    }

    public void displayArray() {
        System.out.print("Array: ");
        for (int i = 0; i < size; i++) {
            System.out.print(array[i] + " ");
        }
        System.out.println();
    }
}

public class ArrayOperationsExample {
    public static void main(String[] args) {
        GenericArrayOperations<Integer> arrayOperations = new GenericArrayOperations<>(5);

        arrayOperations.addElementAtEnd(1);
        arrayOperations.addElementAtEnd(2);
        arrayOperations.addElementAtEnd(3);
        arrayOperations.displayArray();

        arrayOperations.addElementAtBeginning(0);
        arrayOperations.displayArray();

        arrayOperations.addElementAtMiddle(99, 2);
        arrayOperations.displayArray();
    }
}
